scriptencoding utf-8
set encoding=utf-8

" Vim起動完了時にインストール
augroup PluginInstall
  autocmd!
  autocmd VimEnter * if dein#check_install() | call dein#install() | endif
augroup END

" kaoriya/その他 でdirを変える
if has('kaoriya')
  let s:plugin_dir = expand('$VIM/vim74/bundle')
else
  let s:plugin_dir = expand('~/.vim/bundle/')
endif

let s:dein_dir = s:plugin_dir . 'repos/github.com/Shougo/dein.vim'

" dein.vimがまだ入ってなければ 最初に`git clone`
if !isdirectory(s:dein_dir)
  call mkdir(s:dein_dir, 'p')
  silent execute printf('!git clone %s %s', 'https://github.com/Shougo/dein.vim', s:dein_dir)
endif

" vi 互換設定
if &compatible
  set nocompatible               " Be iMproved
endif

" dein を runtimepath に追加
execute 'set runtimepath+=' . s:dein_dir

" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}

" ステータス行にnyanmodokiを表示する
set statusline+=%F%m%r%h%w[%{&ff}]%=%{g:NyanModoki()}(%l,%c)[%P]
let g:nyan_modoki_select_cat_face_number = 2
let g:nayn_modoki_animation_enabled = 1

" plugin
call dein#begin(s:plugin_dir)

call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('tpope/vim-fugitive')
call dein#add('ctrlpvim/ctrlp.vim')
call dein#add('flazz/vim-colorschemes')

" ファイルオープンを便利に
call dein#add('Shougo/unite.vim')

" Unite.vimで最近使ったファイルを表示できるようにする
call dein#add('Shougo/neomru.vim')

" インデントに色を付けて見やすくする
call dein#add('nathanaelkane/vim-indent-guides')

" ログファイルを色づけしてくれる
call dein#add('vim-scripts/AnsiEsc.vim')

" 行末の半角スペースを可視化
call dein#add('bronson/vim-trailing-whitespace')

" Gitを便利に使う
call dein#add('tpope/vim-fugitive')

" ファイルをtree表示してくれる
call dein#add('scrooloose/nerdtree')

" markdown向けプラグイン
call dein#add('plasticboy/vim-markdown')
call dein#add('kannokanno/previm')
call dein#add('tyru/open-browser.vim')

" nyan-modoki
call dein#add('drillbits/nyan-modoki.vim')

" syntastic
call dein#add('scrooloose/syntastic')

" autoclose
call dein#add('Townk/vim-autoclose')
call dein#add('tpope/vim-endwise')

" .jsxファイルのシンタックス
call dein#add('mxw/vim-jsx')

" 自動補完
call dein#add('Shougo/neocomplete.vim')

" ========== for javascript ===========
" syntax
call dein#add('pangloss/vim-javascript')
call dein#add('jelera/vim-javascript-syntax', {'on_ft': 'javascript'})

" 補完
" [JavaScript開発環境 - Node.js/JavaScript入門](http://kaworu.jpn.org/javascript/JavaScript%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83)
call dein#add('mattn/jscomplete-vim')
call dein#add('myhere/vim-nodejs-complete')

" ========== for node.js ===========
call dein#add('thinca/vim-quickrun')

" ========== for html ===========
call dein#add('tpope/vim-surround')
call dein#add('mattn/emmet-vim', {'on_ft': 'html'})

"------------------------------------------------------------

" Required:
call dein#end()

" Required:
filetype plugin indent on

" http://blog.remora.cx/2010/12/vim-ref-with-unite.html
""""""""""""""""""""""""""""""
" Unit.vimの設定
""""""""""""""""""""""""""""""
" 入力モードで開始する
let g:unite_enable_start_insert=1
""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" neoComplete
""""""""""""""""""""""""""""""

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#enable_underbar_completion = 1
let g:neocomplete#enable_camel_case_completion = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : '',
  \ 'vimshell' : $HOME.'/.vimshell_hist',
  \ 'scheme' : $HOME.'/.gosh_completions'
  \ }

if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" vim-javascript-syntaxの設定
""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()

""""""""""""""""""""""""""""""
" vim-javascriptの設定
""""""""""""""""""""""""""""""
:set regexpengine=1
:syntax enable

""""""""""""""""""""""""""""""
" jslintの設定
" [vim で JavaScript の syntax check をする - すぱぶろ](http://superbrothers.hatenablog.com/entry/2012/03/04/155645)
""""""""""""""""""""""""""""""
let g:syntastic_javascript_jslint_conf = "--white --undef --nomen --regexp --plusplus --bitwise --newcap --sloppy --vars"

""""""""""""""""""""""""""""""
" vim-nodejs-completeの設定
""""""""""""""""""""""""""""""
autocmd FileType javascript setlocal omnifunc=nodejscomplete#CompleteJS

let g:node_usejscomplete = 1

"""""""""""""""""""""""""""""""" 
" 基本設定
set title            " title表示
set ruler            " 行数表示
set wildmenu         " 補完
set showcmd          " 入力中のコマンドを表示
set number           " 行番号表示
set nowrap           " 折り返させない
set cursorline       " カーソル行の色変える
set nocursorcolumn   " カーソル位置の色変えない
set laststatus=2     " ステータス行を常に表示
set cmdheight=2      " メッセージ表示欄を2行使う
set showmatch        " 対応するカッコを強調表示
set helpheight=999   " ヘルプの全画面表示
set list             " 不可視文字の表示
set listchars=tab:>- " 不可視文字の表示設定

set shellslash       " Windows でもパスの区切り文字を / に
set iminsert=0       " インサートモードから戻るとimeはオフる

 " カーソル移動系
set backspace=indent,eol,start " どこまでもBackspaceできる
set whichwrap=b,s,h,l,<,>,[,]  " 行頭行末の左右移動で行をまたぐ
set scrolloff=8                " 上下8行の視界を確保
set sidescrolloff=16           " 左右スクロールじの視界を確保
set sidescroll=1               " 左右スクロールは1文字づつ

" ファイル処理関連
set confirm    " 保存されてないファイルがある時は確認
set hidden     " 保存されてないファイルがあっても別ファイル開ける
set autoread   " ファイルが更新されたら読み直す
set nobackup   " バックアップファイル作らない
set noswapfile " スワップファイル禁止
set noundofile " アンドゥファイル禁止

" 検索/置換系
set hlsearch   " 検索ハイライト
set incsearch  " インクリメンタルサーチ
set ignorecase " 大文字小文字を区別しない
set smartcase  " 検索条件に大文字小文字が混在したら、その通り検索する
set wrapscan   " 最後まで行ったら最初に戻る

" タブ/インデント
set expandtab    " タブ入力を空白で置き換える
set tabstop=2    " タブ文字の幅
set shiftwidth=2 " 自動インデント幅
set smarttab     " 行頭の余白内で Tab を打ち込むと、'shiftwidth' の数だけインデントする
set autoindent   " インデントの継続
set smartindent  " 次の行のインデントをよしなに

" コマンドラインモード
set history=10000
""""""""""""""""""""""""""""""""

" 構文毎に文字色を変化させる
syntax on

" grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow

" 行番号の色
highlight LineNr term=underline cterm=underline ctermfg=blue ctermbg=black

" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1

" PrevimOpen ----------------------------------
au BufRead,BufNewFile *.md set filetype=markdown
let g:vim_markdown_folding_disabled=1
" End PrevimOpen ------------------------------

" quickrun ------------------------------------
" quickrunうまくうごきません
"let g:quickrun_config = {
"  \ 'javascript': {
"  \   'command': 'node',
"  \   'tempfile': '{tempname()}.js'
"  \ }
"  \}

" End quickrun --------------------------------

" lint ----------------------------------------
let g:syntastic_javascript_checkers=['eslint']
" End lint ------------------------------------

" mapping -------------------------------------
" バッファ一覧
noremap <C-P> :Unite buffer<CR>
" ファイル一覧
noremap <C-N> :Unite -buffer-name=file file<CR>
" 最近使ったファイルの一覧
noremap <C-Z> :Unite file_mru<CR>
" sourcesを「今開いているファイルのディレクトリ」とする
noremap :uff :<C-u>UniteWithBufferDir file -buffer-name=file<CR>

" NERDTreeを<C-e>で開きたい、閉じたい
noremap <C-e> :NERDTreeToggle<CR>

" PrevimOpenをprevで開きたい
noremap :prev :PrevimOpen<CR>

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<plug>(neosnippet_expand_or_jump)" : "\<TAB>"

if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

"End mapping-----------------------------------

"color scheme----------------------------------
syntax enable
set background=dark
colorscheme solarized
"End color scheme------------------------------

